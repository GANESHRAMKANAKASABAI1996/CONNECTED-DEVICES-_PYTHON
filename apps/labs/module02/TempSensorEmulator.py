'''
Created on Jan 24, 2019

@author: GANESHRAM KANAKASABAI
'''

from threading import Thread#importing thread to execute tasks
from random import uniform#importing uniform to create random float numbers
from labs.common import SensorData#importing sensorData to get the sensor inputs
from time import sleep#importing sleep to set delay
from labs.module02 import SmtpClientConnector#importing smtpClientConnector to send email notification
from labs.common import ConfigUtil#importing ConfigUtil to capture the configuration changes
from labs.common import ConfigConst
'''
Class TempSensorEmulator extends the thread class
'''
class TempSensorEmulator(Thread):
    
    def __init__(self,name):
        '''
     _init_() is called during object initialization.
        '''
        Thread.__init__(self);
        self.enableEmulator = True;
        self.sensor = SensorData.SensorData(name,0,30);
        self.temp_delay = ConfigUtil.ConfigUtil('../../../config/ConnectedDevicesConfig.props');
        '''
        Random float variable is generated by the thread which is the current value.
        If this value exceeds the threshold , then a notification is generated and sent.
        '''
        
    def run(self):
        while True:
            if self.enableEmulator:
                self.sensor.curVal = uniform(float(self.sensor.getMinValue()), float(self.sensor.getMaxValue()));
                self.sensor.addValue(self.sensor.curVal);
                print(self.sensor);
                if self.sensor.curVal >= (self.sensor.getAvgValue()+7):
                    data = (self.sensor);
                    print(data);
                    print("Warning");
                    sen_not = SmtpClientConnector.SmtpClientConnector(); 
                    sen_not.publishMessage("Temperature Notification", data);
                delay = int(self.temp_delay.getProperty(ConfigConst.ConfigConst.CONSTRAINED_DEVICE, ConfigConst.ConfigConst.POLL_CYCLES_KEY));     
                sleep(delay);#The sleep() suspends the execution for the fixed number of seconds.